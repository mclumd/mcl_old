#ifndef MCL_API_TYPES_H
#define MCL_API_TYPES_H

/*! \file APITypes.h
  \brief typedefs used by MCL and the MCL/Host API
*/

#include <string>
#include <vector>
#include <iostream>

using namespace std;

typedef unsigned int mclKey;  // mcl-assigned hash key

typedef unsigned int pkType;  // property key type
typedef bool         pvType;  // property value type

typedef unsigned int  spkType; // sensor property key
typedef unsigned char spvType; // sensor property value

typedef unsigned int ecType;   // expectation code type
typedef void * egkType;        // expectation group key
typedef void * resRefType;     // response reference type

// exception class
#ifndef MCL_EXCEPTION_CLASS_DEF
#define MCL_EXCEPTION_CLASS_DEF

/** class of exceptions generated by MCL.
 * In case the Host wants to trap MCL exceptions.
 */
class mclException : public exception {
 public:

  mclException() : exception(),msg("unspecified MCL exception.") {};
  mclException(string m) : exception(),msg(m) 
    { 
      // cout << "constructing ex : " << msg.c_str() << endl;
      // cout << "constructing ex : " << msg << endl;
      // cout << "constructing ex : " << what() << endl;
    };
  virtual ~mclException() throw() {};

  virtual const char *what() {
    return msg.c_str();
  };

  string msg;

};

#endif // exception class

// monitor response requires the preceding definitions
#ifndef MCL_MONITOR_RESPONSE_H
#include "mclMonitorResponse.h"
#endif

#endif
